# CHAPTER 2 변수

정수: **int**, long

실수: float, **double**

**리터럴이란?**

프로그래밍에서 상수를 다른 의미(한번 선언후 변경할 수 없는 값)로 써서

상수를 다른 이름으로 부름. 그것이 **리터럴**

정수형과 실수형에는 여러 타입이 존재하여서 접미사를 붙여서 타입을 구분한다.

**long타입을 표현하기 위한 L 접미사**

ex) 10L, 20L, 30L 등

**16진수를 표현하기 위한 0x 접미사**

ex) 0x24 → 16진수로 24

**8진수를 표현하기 위한 0 접미사**

ex) 024 → 8진수로 24

**float타입을 표현하기 위한 F 접미사**

ex) 1.1F, 2.2f, 3.3f 등

**double타입을 표현하기 위한 D 접미사 → int처럼 기본형이어서 생략 가능**

ex) 1.1D, 2.2d, 3.3d 등

**문자 리터럴**

‘J’

**문자열 리터럴**

“J”

**문자열 리터럴**은 “ ”안에 아무런 문자를 넣지 않는 것을 허용하며, 이를 **빈 문자열**이라고 한다.

그러나 **문자 리터럴**은 반드시 ‘ ’안에 하나의 문자가 있어야 한다.

String은 클래스이지만 특별히 new로 객체를 생성하지 않고 바로 사용 가능하다.

String name = new String(”JAVA”);

String name = “JAVA”;

**문자열 결합**

숫자 + 문자열 = 문자열

**기본형과 참조형**

**기본형 변수**: 실제 값을 저장

**참조형 변수**: 어떤 값이 저장되어 있는 주소를 저장

**printf**

%d: 10진수

%x: 16진수

%f: 부동 소수점(6자리까지 출력), %e: 지수, %g: 간략하게 표현

%c: 문자

%s: 문자열

System.out.printf(”%d”, 24);

**오버플로우**

타입이 표현할 수 있는 값의 범위를 넘어서는 것

최소값에서 1을 빼면 최댓값이 되고, 최대값에 1을 더하면 최소값이 된다.

**타입간 변화**

1. **숫자를 문자로 변환 - 숫자에 ‘0’을 더한다.**

(char) (3+ ‘0’) → ‘3’

1. **문자를 숫자로 변환 - 문자에서 ‘0’을 뺀다.**

‘3’ - ‘0’ → 3

1. **숫자를 문자열로 변환 - 숫자에 빈 문자열(””)을 더한다.**

3 + “” → “3”

1. **문자열을 숫자로 변환 - Integer.parseInt() 또는 Double.parseDouble()을 사용한다.**

Integer.parseInt(”3”) → 3

Double.parseDouble(”3.14”) → 3.14

1. **문자열을 문자로 변환 - charAt(0)을 사용한다.**

“3”.charAt(0) → ‘3’

1. **문자를 문자열로 변환 - 빈 문자열(””)을 더한다.**

‘3’ + “” → “3”
